{% extends 'base.html.twig' %}

{% block title %}Contactez-nous{% endblock %}

{% block body %}
<link rel="stylesheet" href="{{ asset('css/accueil.css') }}">
<link rel="stylesheet" href="{{ asset('css/contact.css') }}">
<div class="container  contact">
  <div class="row justify-content-center">
    <div class="col-md-6">
    <!-- Message de succès -->
        <div id="success-message" class="alert alert-success d-none" role="alert">
          Votre message a été envoyé avec succès!
        </div>
      <h1 class="text-center">Formulaire de contact</h1>
      {{ form_start(form, {'attr': {'class': 'form', 'id': 'contact-form'}}) }}
        <div class="mb-3">
          {{ form_label(form.email, 'Email', {'label_attr': {'class': 'form-label'}}) }}
          {{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="mb-3">
          {{ form_label(form.description, 'Description', {'label_attr': {'class': 'form-label'}}) }}
          {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="mb-3">
          {{ form_label(form.content, 'Commentaire', {'label_attr': {'class': 'form-label'}}) }}
          {{ form_widget(form.content, {'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="d-grid gap-2">
          <button type="submit" class="btn btn-primary">Envoyer</button>
        </div>
        <!-- Message de succès -->
        <div id="success-message" class="alert alert-success d-none" role="alert">
          Votre message a été envoyé avec succès!
        </div>
      {{ form_end(form) }}
    </div>
  </div>
</div>

<script>
  // Méthode asynchrone pour gérer la soumission du formulaire
  async function handleSubmitAsync(event) {
    // Empêcher l'action du formulaire et le rafraîchissement de la page
    event.preventDefault();

    // Récupérer le formulaire
    const form = event.target;
    // Envoyer les données du formulaire via AJAX
    try {
      const response = await fetch(form.action, {
        method: form.method,
        body: new FormData(form)
      });

      // Vérifier si la requête a réussi
      if (response.ok) {
        // Afficher un message de succès
        document.getElementById('success-message').classList.remove('d-none');
        // Réinitialiser le formulaire
        form.reset();
        // Vider les champs de saisie
        resetFormInputs(form);
      } else {
        // Afficher un message d'erreur
        alert('Une erreur est survenue lors de l\'envoi du formulaire.');
      }
    } catch (error) {
      
      // Afficher un message d'erreur en cas d'échec de la requête
      console.error('Erreur:', error);
      alert('Une erreur est survenue lors de l\'envoi du formulaire.');
    }
  }
  // Fonction pour vider les champs de saisie du formulaire
  function resetFormInputs(form) {
    // Réinitialiser les valeurs des champs du formulaire
    form.querySelectorAll('input, textarea').forEach(field => {
      field.value = '';
    });
  }

  // Ajouter un écouteur d'événements pour soumettre le formulaire
  const form = document.getElementById('contact-form');
  form.addEventListener('submit', handleSubmitAsync);
</script>

{% endblock %}
